import React, { useState, useEffect } from 'react';
import { collection, onSnapshot, doc, addDoc, serverTimestamp, getDoc, setDoc, deleteDoc, updateDoc, query, orderBy, limit, getDocs, where } from 'firebase/firestore';
import ReceiptTemplate from './BillTemplates/ReceiptTemplate';
import PurchaseReceiptTemplate from './BillTemplates/PurchaseReceiptTemplate';
import jsPDF from 'jspdf';
import ReactDOM from 'react-dom';

// Import jspdf-autotable dynamically
let autoTable = null;
try {
  autoTable = require('jspdf-autotable');
  if (autoTable && autoTable.default) {
    autoTable.default(jsPDF);
  }
} catch (error) {
  console.warn('jspdf-autotable not available, using fallback PDF generation');
}

// Export functionality
const exportToCSV = (data, filename) => {
  if (!data || data.length === 0) return;
  
  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join(','),
    ...data.map(row => headers.map(header => `"${row[header] || ''}"`).join(','))
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${filename}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

const exportToExcel = (data, filename) => {
  if (!data || data.length === 0) return;
  
  const headers = Object.keys(data[0]);
  const csvContent = [
    headers.join('\t'),
    ...data.map(row => headers.map(header => row[header] || '').join('\t'))
  ].join('\n');
  
  const blob = new Blob([csvContent], { type: 'application/vnd.ms-excel' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `${filename}.xls`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

const exportToPDF = (data, filename, title, companyData = {}) => {
  if (!data || data.length === 0) {
    console.log('No data to export');
    return;
  }
  
  // Check if jsPDF is available
  if (typeof jsPDF === 'undefined') {
    console.error('jsPDF is not available');
    alert('PDF generation library not available. Please refresh the page and try again.');
    return;
  }
  
  try {
    console.log('Starting PDF generation with:', { data: data.length, filename, title, companyData });
    
    // Validate data structure
    if (!data[0] || typeof data[0] !== 'object') {
      console.error('Invalid data structure:', data);
      alert('Invalid data structure for PDF generation.');
      return;
    }
    
    const headers = Object.keys(data[0]);
    
    // Always use landscape for better header display
    const doc = new jsPDF('landscape');
    
    console.log('Using landscape orientation for better header display');
    
    const tableData = data.map(row => {
      return headers.map(header => {
        const value = row[header];
        // Convert all values to strings and handle null/undefined
        return value != null ? String(value) : '';
      });
    });
    
    console.log('PDF setup complete, headers:', headers);
    console.log('Sample table data:', tableData[0]);
    console.log('Full data structure:', data);
    console.log('Headers count:', headers.length);
    console.log('Data rows count:', tableData.length);
    
    // Add letterhead with company details
    doc.setFillColor(66, 139, 202);
    doc.rect(0, 0, doc.internal.pageSize.width, 30, 'F');
    
    // Company name in header (use actual company name if available)
    doc.setTextColor(255, 255, 255);
    doc.setFontSize(18);
    doc.setFont(undefined, 'bold');
    const companyName = companyData?.firmName || 'Acc-App';
    doc.text(companyName, 14, 15);
    
    // Company details
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    
    // Build company contact info
    const companyContact = [];
    if (companyData?.address) companyContact.push(companyData.address);
    if (companyData?.city && companyData?.state) companyContact.push(`${companyData.city}, ${companyData.state}`);
    if (companyData?.pincode) companyContact.push(`PIN: ${companyData.pincode}`);
    if (companyData?.contactNumber) companyContact.push(`Phone: ${companyData.contactNumber}`);
    if (companyData?.email) companyContact.push(`Email: ${companyData.email}`);
    if (companyData?.gstin) companyContact.push(`GSTIN: ${companyData.gstin}`);
    
    // Display company info in multiple lines if needed
    if (companyContact.length > 0) {
      const contactLine1 = companyContact.slice(0, 2).join(' | ');
      const contactLine2 = companyContact.slice(2, 4).join(' | ');
      doc.text(contactLine1, 14, 22);
      if (contactLine2) {
        doc.text(contactLine2, 14, 28);
      }
    } else {
      doc.text('Professional Accounting Software', 14, 22);
      doc.text('www.acc-app.com | info@acc-app.com', 14, 28);
    }
    
    // Reset text color for content
    doc.setTextColor(0, 0, 0);
    
    // Set title
    doc.setFontSize(16);
    doc.setFont(undefined, 'bold');
    doc.text(title, 14, 45);
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    
    // Add date
    const currentDate = new Date().toLocaleDateString('en-IN');
    doc.text(`Generated on: ${currentDate}`, 14, 52);
    
    console.log('Letterhead complete, starting table');
    
    // Create a table with grid lines
    let y = 65; // Start table below letterhead
    const colWidth = 50; // Wider columns in landscape mode
    const rowHeight = 8;
    const maxCols = Math.floor((doc.internal.pageSize.width - 28) / colWidth);
    
    console.log('Table setup:', { maxCols, colWidth, rowHeight, totalHeaders: headers.length });
    console.log('All headers:', headers);
    
    // Adjust column width if we have more columns than can fit
    let actualColWidth = colWidth;
    let actualMaxCols = maxCols;
    
    if (headers.length > maxCols) {
      // Reduce column width to fit all headers
      actualColWidth = (doc.internal.pageSize.width - 28) / headers.length;
      actualMaxCols = headers.length;
      console.log('Adjusted column width:', { actualColWidth, actualMaxCols });
    }
    
    // Draw table header with lines
    doc.setFillColor(66, 139, 202);
    doc.setTextColor(255, 255, 255);
    doc.setFont(undefined, 'bold');
    
    // Draw header background and borders
    headers.slice(0, actualMaxCols).forEach((header, index) => {
      const x = 14 + (index * actualColWidth);
      // Header background
      doc.rect(x, y - 5, actualColWidth, rowHeight, 'F');
      // Header text - use full headers in landscape mode
      const headerText = header;
      doc.text(headerText, x + 2, y);
      // Vertical lines for header
      doc.setDrawColor(255, 255, 255);
      doc.setLineWidth(0.5);
      doc.line(x, y - 5, x, y + rowHeight - 5);
    });
    
    // Bottom line of header
    doc.setDrawColor(255, 255, 255);
    doc.setLineWidth(0.5);
    doc.line(14, y + rowHeight - 5, 14 + (actualMaxCols * actualColWidth), y + rowHeight - 5);
    
    y += rowHeight + 2;
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'normal');
    
    console.log('Header complete, drawing data rows:', tableData.length);
    
    // Draw data rows with grid lines
    tableData.forEach((row, rowIndex) => {
      // Check if we need a new page
      if (y > doc.internal.pageSize.height - 20) {
        doc.addPage();
        y = 25;
      }
      
      // Draw row data and vertical lines
      row.slice(0, actualMaxCols).forEach((cell, colIndex) => {
        const x = 14 + (colIndex * actualColWidth);
        // Cell text - ensure it's a string and truncate if needed
        const cellText = String(cell || '');
        const maxLength = Math.floor(actualColWidth / 3); // Approximate characters that fit
        const displayText = cellText.length > maxLength ? cellText.substring(0, maxLength - 3) + '...' : cellText;
        doc.text(displayText, x + 2, y);
        // Vertical lines for data cells
        doc.setDrawColor(100, 100, 100);
        doc.setLineWidth(0.2);
        doc.line(x, y - 5, x, y + rowHeight - 5);
      });
      
      // Horizontal line after each row
      doc.setDrawColor(100, 100, 100);
      doc.setLineWidth(0.2);
      doc.line(14, y + rowHeight - 5, 14 + (actualMaxCols * actualColWidth), y + rowHeight - 5);
      
      y += rowHeight;
      
      // Add some spacing every 5 rows
      if ((rowIndex + 1) % 5 === 0) {
        y += 2;
      }
    });
    
    console.log('Data rows complete, adding footer');
    
    // Add footer
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(8);
      doc.setTextColor(128, 128, 128);
      doc.text(`Page ${i} of ${pageCount}`, doc.internal.pageSize.width - 30, doc.internal.pageSize.height - 10);
      const footerText = companyName + ' - Professional Accounting Software';
      doc.text(footerText, 14, doc.internal.pageSize.height - 10);
    }
    
    console.log('Saving PDF:', filename);
    doc.save(`${filename}.pdf`);
    console.log('PDF saved successfully');
    
  } catch (error) {
    console.error('PDF generation error details:', error);
    console.error('Error stack:', error.stack);
    
    // Try fallback method
    try {
      console.log('Trying fallback PDF method');
      const doc = new jsPDF();
      
      // Simple header
      doc.setFontSize(16);
      doc.text(title, 14, 20);
      
      // Simple table without grid lines
      let y = 30;
      const headers = Object.keys(data[0]);
      
      // Headers
      doc.setFontSize(12);
      headers.forEach((header, index) => {
        doc.text(header, 14 + (index * 40), y);
      });
      
      y += 10;
      
      // Data
      doc.setFontSize(10);
      data.forEach((row, rowIndex) => {
        if (y > doc.internal.pageSize.height - 20) {
          doc.addPage();
          y = 20;
        }
        
        headers.forEach((header, colIndex) => {
          const value = row[header] || '';
          const displayText = String(value).length > 15 ? String(value).substring(0, 12) + '...' : String(value);
          doc.text(displayText, 14 + (colIndex * 40), y);
        });
        
        y += 8;
      });
      
      doc.save(`${filename}_fallback.pdf`);
      console.log('Fallback PDF saved successfully');
      
    } catch (fallbackError) {
      console.error('Fallback PDF generation also failed:', fallbackError);
      alert('Error generating PDF. Please try again.');
    }
  };

const Payments = ({ db, userId, isAuthReady, appId }) => {
  // Main state
  const [activeTab, setActiveTab] = useState('invoice');
  const [receiptsSortBy, setReceiptsSortBy] = useState('receiptNumber');
  const [receiptsSortOrder, setReceiptsSortOrder] = useState('asc'); // 'invoice', 'challan', 'purchase'
  const [receiptsSubTab, setReceiptsSubTab] = useState('invoice'); // 'invoice', 'challan', 'purchase' for receipts tab
  const [timeFilter, setTimeFilter] = useState('all'); // 'all', 'custom', 'financial', 'monthly', 'quarterly'
  const [customDateFrom, setCustomDateFrom] = useState('');
  const [customDateTo, setCustomDateTo] = useState('');
  const [selectedParty, setSelectedParty] = useState('');
  const [partySearchTerm, setPartySearchTerm] = useState('');
  const [selectedFinancialYear, setSelectedFinancialYear] = useState('2025-26');
  const [selectedMonth, setSelectedMonth] = useState('');
  const [selectedQuarter, setSelectedQuarter] = useState('');
  const [selectedSubFilter, setSelectedSubFilter] = useState(''); // 'month' or 'quarter'

  // Data state
  const [parties, setParties] = useState([]);
  const [invoices, setInvoices] = useState([]);
  const [challans, setChallans] = useState([]);
  const [purchaseBills, setPurchaseBills] = useState([]);
  const [payments, setPayments] = useState([]);
  const [company, setCompany] = useState(null);

  // UI state
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [showPaymentDetailsModal, setShowPaymentDetailsModal] = useState(false);
  const [showReceiptModal, setShowReceiptModal] = useState(false);
  const [selectedBill, setSelectedBill] = useState(null);
  const [selectedPayment, setSelectedPayment] = useState(null);
  const [selectedReceipt, setSelectedReceipt] = useState(null);
  const [sortConfig, setSortConfig] = useState({ key: '', direction: 'asc' });
  const [paymentType, setPaymentType] = useState('bill'); // 'bill' or 'khata'

  // Payment entry state
  const [paymentAmount, setPaymentAmount] = useState('');
  const [paymentDate, setPaymentDate] = useState(new Date().toISOString().split('T')[0]);
  const [paymentMode, setPaymentMode] = useState('Cash');
  const [paymentReference, setPaymentReference] = useState('');
  const [paymentNotes, setPaymentNotes] = useState('');
  const [receiptNumber, setReceiptNumber] = useState('');
  const [selectedPartyForPayment, setSelectedPartyForPayment] = useState('');

  const paymentModes = [
    'Cash', 'Cheque', 'Bank Transfer', 'UPI', 'Credit Card', 'Debit Card', 
    'Online Payment', 'Demand Draft', 'NEFT', 'RTGS', 'IMPS'
  ];

  // Helper function to convert Firestore timestamp to date string
  const convertTimestamp = (timestamp) => {
    if (!timestamp) return new Date().toISOString().split('T')[0];
    if (typeof timestamp === 'string') return timestamp;
    if (timestamp.seconds) {
      return new Date(timestamp.seconds * 1000).toISOString().split('T')[0];
    }
    return new Date(timestamp).toISOString().split('T')[0];
  };

  // Helper function to get financial year date range
  const getFinancialYearRange = (financialYear) => {
    const [startYear] = financialYear.split('-');
    const yearNum = parseInt('20' + startYear); // Convert 25 to 2025
    const startDate = new Date(yearNum, 3, 1); // April 1st (month 3 = April)
    const endDate = new Date(yearNum + 1, 2, 31); // March 31st (month 2 = March)
    return { startDate, endDate };
  };

  // Helper function to get month date range
  const getMonthRange = (monthYear) => {
    const [month, year] = monthYear.split('-');
    const yearNum = parseInt('20' + year); // Convert 25 to 2025
    const startDate = new Date(yearNum, parseInt(month) - 1, 1);
    const endDate = new Date(yearNum, parseInt(month), 0);
    return { startDate, endDate };
  };

  // Helper function to get quarter date range
  const getQuarterRange = (quarterYear) => {
    const [quarter, year] = quarterYear.split('-');
    const yearNum = parseInt('20' + year); // Convert 25 to 2025
    let startMonth, endMonth;
    
    switch(quarter) {
      case 'Q1': // April to June
        startMonth = 3; // April (0-indexed)
        endMonth = 5; // June (0-indexed)
        break;
      case 'Q2': // July to September
        startMonth = 6; // July (0-indexed)
        endMonth = 8; // September (0-indexed)
        break;
      case 'Q3': // October to December
        startMonth = 9; // October (0-indexed)
        endMonth = 11; // December (0-indexed)
        break;
      case 'Q4': // January to March
        startMonth = 0; // January (0-indexed)
        endMonth = 2; // March (0-indexed)
        break;
      default:
        startMonth = 0;
        endMonth = 11;
    }
    
    const startDate = new Date(yearNum, startMonth, 1);
    const endDate = new Date(yearNum, endMonth + 1, 0);
    return { startDate, endDate };
  };

  // Generate sequential receipt number
  const generateReceiptNumber = async () => {
    const currentYear = new Date().getFullYear();
    const financialYear = `${currentYear.toString().slice(-2)}-${(currentYear + 1).toString().slice(-2)}`;
    const paymentType = activeTab === 'invoice' ? 'I' : activeTab === 'challan' ? 'C' : 'P';
    
    console.log('Generating receipt number for financial year:', financialYear, 'payment type:', paymentType);
    
    try {
      // Get ALL payments to find the highest sequence number for THIS specific payment type
      const paymentsQuery = query(collection(db, `artifacts/${appId}/users/${userId}/payments`));
      const paymentsSnapshot = await getDocs(paymentsQuery);
      
      let highestSequence = 0;
      
      // Check all payments for the highest sequence number for THIS payment type only
      paymentsSnapshot.forEach((doc) => {
        const payment = doc.data();
        if (payment.receiptNumber) {
          console.log('Checking receipt number:', payment.receiptNumber);
          
          // Match pattern: PR[I|C|P]25-26/number - but only for THIS payment type
          const regexPattern = new RegExp(`PR${paymentType}${financialYear.replace('-', '\\-')}\\/(\\d+)`);
          const match = payment.receiptNumber.match(regexPattern);
          
          if (match) {
            const sequence = parseInt(match[1]);
            console.log('Found sequence for payment type', paymentType, ':', sequence);
            if (sequence > highestSequence) {
              highestSequence = sequence;
              console.log('New highest sequence for payment type', paymentType, ':', highestSequence);
            }
          }
        }
      });
      
      const nextSequence = highestSequence + 1;
      console.log('Final next sequence for payment type', paymentType, ':', nextSequence);
      
      const receiptNumber = `PR${paymentType}${financialYear}/${nextSequence}`;
      console.log('Generated receipt number:', receiptNumber);
      
      return receiptNumber;
    } catch (error) {
      console.error('Error generating receipt number:', error);
      const fallbackNumber = `PR${paymentType}${financialYear}/1`;
      console.log('Fallback receipt number:', fallbackNumber);
      return fallbackNumber;
    }
  };

  // FIFO Payment Allocation Logic
  const allocatePaymentFIFO = (partyId, paymentAmount, billType) => {
    const bills = billType === 'invoice' ? invoices : billType === 'challan' ? challans : purchaseBills;
    const partyBills = bills.filter(bill => (bill.partyId === partyId || bill.party === partyId) && bill.outstanding > 0);
    
    // Sort by date (FIFO - oldest first)
    partyBills.sort((a, b) => new Date(a.date || a.invoiceDate || a.challanDate || a.billDate) - new Date(b.date || b.invoiceDate || b.challanDate || b.billDate));
    
    let remainingAmount = paymentAmount;
    const allocations = [];
    
    for (const bill of partyBills) {
      if (remainingAmount <= 0) break;
      
      const billOutstanding = bill.outstanding || 0;
      const allocatedAmount = Math.min(remainingAmount, billOutstanding);
      
      allocations.push({
        billType: billType,
        billId: bill.id,
        billNumber: bill.number || bill.invoiceNumber || bill.challanNumber || bill.billNumber,
        allocatedAmount: allocatedAmount,
        billOutstanding: billOutstanding,
        isFullPayment: allocatedAmount >= billOutstanding
      });
      
      remainingAmount -= allocatedAmount;
    }
    
    return { allocations, remainingAmount };
  };

  // Fetch parties
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const path = `artifacts/${appId}/users/${userId}/parties`;
      const partiesCollectionRef = collection(db, path);
      const unsubscribe = onSnapshot(
        partiesCollectionRef,
        (snapshot) => {
          const allParties = [];
          snapshot.forEach((doc) => {
            allParties.push({ id: doc.id, ...doc.data() });
          });
          allParties.sort((a, b) => (a.firmName || '').localeCompare(b.firmName || ''));
          setParties(allParties);
        },
        (error) => {
          console.error('Error fetching parties:', error);
          setParties([]);
        }
      );
      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady, appId]);

  // Fetch invoices
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const path = `artifacts/${appId}/users/${userId}/salesBills`;
      const billsCollectionRef = collection(db, path);
      const unsubscribe = onSnapshot(
        billsCollectionRef,
        (snapshot) => {
          const bills = [];
          snapshot.forEach((doc) => {
            const data = doc.data();
            const bill = { 
              id: doc.id, 
              ...data,
              invoiceDate: convertTimestamp(data.invoiceDate || data.createdAt),
              date: convertTimestamp(data.date || data.createdAt)
            };
            
            // Debug logging for first few bills
            if (bills.length < 3) {
              console.log('Invoice data:', {
                id: bill.id,
                number: bill.number,
                invoiceDate: bill.invoiceDate,
                date: bill.date,
                originalInvoiceDate: data.invoiceDate,
                originalCreatedAt: data.createdAt
              });
            }
            
            // Calculate outstanding from payments
            const billPayments = payments.filter(p => 
              p.allocations && p.allocations.some(a => a.billId === bill.id && a.billType === 'invoice')
            );
            
            const totalPaid = billPayments.reduce((sum, payment) => {
              const allocation = payment.allocations.find(a => a.billId === bill.id && a.billType === 'invoice');
              return sum + (allocation ? allocation.allocatedAmount : 0);
            }, 0);
            
            const totalAmount = parseFloat(bill.totalAmount || bill.amount) || 0;
            bill.outstanding = totalAmount - totalPaid;
            bill.totalPaid = totalPaid;
            bill.totalAmount = totalAmount;
            bill.paymentCount = billPayments.length;
            bills.push(bill);
          });
                      bills.sort((a, b) => (b.number || '').localeCompare(a.number || ''));
            setInvoices(bills);
        },
        (error) => {
          console.error('Error fetching invoices:', error);
          setInvoices([]);
        }
      );
      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady, appId, payments]);

  // Fetch challans
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const path = `artifacts/${appId}/users/${userId}/challans`;
      const billsCollectionRef = collection(db, path);
      const unsubscribe = onSnapshot(
        billsCollectionRef,
        (snapshot) => {
          const bills = [];
          snapshot.forEach((doc) => {
            const data = doc.data();
            const bill = { 
              id: doc.id, 
              ...data,
              challanDate: convertTimestamp(data.challanDate || data.createdAt),
              date: convertTimestamp(data.date || data.createdAt)
            };
            
            // Calculate outstanding from payments
            const billPayments = payments.filter(p => 
              p.allocations && p.allocations.some(a => a.billId === bill.id && a.billType === 'challan')
            );
            
            const totalPaid = billPayments.reduce((sum, payment) => {
              const allocation = payment.allocations.find(a => a.billId === bill.id && a.billType === 'challan');
              return sum + (allocation ? allocation.allocatedAmount : 0);
            }, 0);
            
            const totalAmount = parseFloat(bill.totalAmount || bill.amount) || 0;
            bill.outstanding = totalAmount - totalPaid;
            bill.totalPaid = totalPaid;
            bill.totalAmount = totalAmount;
            bill.paymentCount = billPayments.length;
            bills.push(bill);
          });
          bills.sort((a, b) => (b.challanNumber || '').localeCompare(a.challanNumber || ''));
          setChallans(bills);
        },
        (error) => {
          console.error('Error fetching challans:', error);
          setChallans([]);
        }
      );
      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady, appId, payments]);

  // Fetch purchase bills
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const path = `artifacts/${appId}/users/${userId}/purchaseBills`;
      const billsCollectionRef = collection(db, path);
      const unsubscribe = onSnapshot(
        billsCollectionRef,
        (snapshot) => {
          const bills = [];
          snapshot.forEach((doc) => {
            const data = doc.data();
            const bill = { 
              id: doc.id, 
              ...data,
              billDate: convertTimestamp(data.billDate || data.createdAt),
              date: convertTimestamp(data.date || data.createdAt)
            };
            
            // Calculate outstanding from payments
            const billPayments = payments.filter(p => 
              p.allocations && p.allocations.some(a => a.billId === bill.id && a.billType === 'purchase')
            );
            
            const totalPaid = billPayments.reduce((sum, payment) => {
              const allocation = payment.allocations.find(a => a.billId === bill.id && a.billType === 'purchase');
              return sum + (allocation ? allocation.allocatedAmount : 0);
            }, 0);
            
            const totalAmount = parseFloat(bill.totalAmount || bill.amount) || 0;
            bill.outstanding = totalAmount - totalPaid;
            bill.totalPaid = totalPaid;
            bill.totalAmount = totalAmount;
            bill.paymentCount = billPayments.length;
            bills.push(bill);
          });
          bills.sort((a, b) => (b.number || '').localeCompare(a.number || ''));
          setPurchaseBills(bills);
        },
        (error) => {
          console.error('Error fetching purchase bills:', error);
          setPurchaseBills([]);
        }
      );
      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady, appId, payments]);

  // Fetch payments (single table)
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const paymentsPath = `artifacts/${appId}/users/${userId}/payments`;
      const paymentsRef = collection(db, paymentsPath);
      
      const unsubscribePayments = onSnapshot(paymentsRef, (snapshot) => {
        const allPayments = [];
        snapshot.forEach((doc) => {
          const data = doc.data();
          const payment = {
            id: doc.id,
            ...data,
            date: convertTimestamp(data.paymentDate || data.createdAt)
          };
          allPayments.push(payment);
        });
        console.log('Fetched all payments:', allPayments);
        setPayments(allPayments);
        
        // Check for duplicate receipt numbers after payments are loaded
        if (allPayments.length > 0) {
          checkAndFixDuplicateReceiptNumbers();
        }
      });
      
      return () => unsubscribePayments();
    }
  }, [db, userId, isAuthReady, appId]);

  // Fetch company details
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const companyDocRef = doc(db, `artifacts/${appId}/users/${userId}/companyDetails`, 'myCompany');
      const unsubscribe = onSnapshot(companyDocRef, (docSnap) => {
        if (docSnap.exists()) {
          setCompany(docSnap.data());
        }
      });
      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady, appId]);

  // Get current bills based on active tab
  const getCurrentBills = () => {
    switch(activeTab) {
      case 'invoice': return invoices;
      case 'challan': return challans;
      case 'purchase': return purchaseBills;
      default: return [];
    }
  };

  // Get bill number field based on active tab
  const getBillNumberField = () => {
    switch(activeTab) {
      case 'invoice': return 'number';
      case 'challan': return 'challanNumber';
      case 'purchase': return 'number';
      default: return 'number';
    }
  };

  // Get bill number display value
  const getBillNumber = (bill) => {
    switch(activeTab) {
      case 'invoice': return bill.number || bill.invoiceNumber;
      case 'challan': return bill.challanNumber || bill.number;
      case 'purchase': return bill.number || bill.billNumber;
      default: return bill.number;
    }
  };

  // Get bill date field based on active tab
  const getBillDateField = () => {
    switch(activeTab) {
      case 'invoice': return 'invoiceDate';
      case 'challan': return 'challanDate';
      case 'purchase': return 'billDate';
      default: return 'date';
    }
  };

  // Get party name by ID
  const getPartyName = (partyId) => {
    if (!partyId) return 'Unknown Party';
    const party = parties.find(p => p.id === partyId);
    return party ? (party.firmName || party.name) : 'Unknown Party';
  };

  // Filter bills based on time and party
  const getFilteredBills = () => {
    let bills = getCurrentBills();
    
    // Filter by party
    if (selectedParty) {
      bills = bills.filter(bill => {
        const billPartyId = bill.partyId || bill.party;
        return billPartyId === selectedParty;
      });
    }
    
    // Filter by time
    if (timeFilter === 'custom' && customDateFrom && customDateTo) {
      bills = bills.filter(bill => {
        const billDate = new Date(bill[getBillDateField()]);
        const fromDate = new Date(customDateFrom);
        const toDate = new Date(customDateTo);
        return billDate >= fromDate && billDate <= toDate;
      });
    } else if (timeFilter === 'financial' && selectedFinancialYear) {
      let startDate, endDate;
      
      // If sub-filter is selected, use that specific range
      if (selectedSubFilter === 'month' && selectedMonth) {
        const monthRange = getMonthRange(selectedMonth);
        startDate = monthRange.startDate;
        endDate = monthRange.endDate;
      } else if (selectedSubFilter === 'quarter' && selectedQuarter) {
        const quarterRange = getQuarterRange(selectedQuarter);
        startDate = quarterRange.startDate;
        endDate = quarterRange.endDate;
      } else {
        // Use full financial year range
        const yearRange = getFinancialYearRange(selectedFinancialYear);
        startDate = yearRange.startDate;
        endDate = yearRange.endDate;
      }
      
      bills = bills.filter(bill => {
        const billDateField = getBillDateField();
        const billDateValue = bill[billDateField];
        const billDate = new Date(billDateValue);
        return billDate >= startDate && billDate <= endDate;
      });
    }
    
    return bills;
  };

  // Sort bills
  const sortBills = (bills) => {
    if (!sortConfig.key) return bills;
    
    return [...bills].sort((a, b) => {
      let aValue = a[sortConfig.key];
      let bValue = b[sortConfig.key];
      
      if (sortConfig.key === 'partyName') {
        aValue = getPartyName(a.partyId);
        bValue = getPartyName(b.partyId);
      }
      
      if (typeof aValue === 'string') {
        aValue = aValue.toLowerCase();
        bValue = bValue.toLowerCase();
      }
      
      if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
      return 0;
    });
  };

  // Sort receipts
  const sortReceipts = (receipts) => {
    if (!receiptsSortBy) return receipts;
    
    return [...receipts].sort((a, b) => {
      let aValue, bValue;
      
      switch (receiptsSortBy) {
        case 'receiptNumber':
          aValue = a.receiptNumber || '';
          bValue = b.receiptNumber || '';
          break;
        case 'partyName':
          aValue = a.partyName || '';
          bValue = b.partyName || '';
          break;
        case 'totalAmount':
          aValue = parseFloat(a.totalAmount || 0);
          bValue = parseFloat(b.totalAmount || 0);
          break;
        case 'paymentDate':
          aValue = new Date(a.paymentDate || a.date || 0);
          bValue = new Date(b.paymentDate || b.date || 0);
          break;
        case 'paymentMode':
          aValue = a.paymentMode || '';
          bValue = b.paymentMode || '';
          break;
        case 'paymentType':
          aValue = a.paymentType || '';
          bValue = b.paymentType || '';
          break;
        default:
          return 0;
      }
      
      if (receiptsSortOrder === 'asc') {
        return aValue > bValue ? 1 : -1;
      } else {
        return aValue < bValue ? 1 : -1;
      }
    });
  };

  // Handle sort
  const handleSort = (key) => {
    setSortConfig(prev => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  // Handle receipts sort
  const handleReceiptsSort = (key) => {
    setReceiptsSortBy(key);
    setReceiptsSortOrder(prev => prev === 'asc' ? 'desc' : 'asc');
  };

  // Handle add payment (Bill-wise)
  const handleAddPayment = async (bill) => {
    setPaymentType('bill');
    setSelectedBill(bill);
    setSelectedPartyForPayment(bill.partyId || bill.party);
    setPaymentAmount(bill.outstanding.toString());
    const receiptNum = await generateReceiptNumber();
    setReceiptNumber(receiptNum);
    setShowPaymentModal(true);
  };

  // Handle add khata payment (Party-wise)
  const handleAddKhataPayment = async (partyId) => {
    setPaymentType('khata');
    setSelectedBill(null);
    setSelectedPartyForPayment(partyId);
    setPaymentAmount('');
    const receiptNum = await generateReceiptNumber();
    setReceiptNumber(receiptNum);
    setShowPaymentModal(true);
  };

  // Handle save payment
  const handleSavePayment = async () => {
    if (!selectedPartyForPayment || !paymentAmount) return;

    try {
      const paymentAmountNum = parseFloat(paymentAmount);
      
      let paymentData;
      
      if (paymentType === 'bill' && selectedBill) {
        // Bill-wise payment - allocate to specific bill
        const billOutstanding = selectedBill.outstanding || 0;
        const allocatedAmount = Math.min(paymentAmountNum, billOutstanding);
        const remainingAmount = paymentAmountNum - allocatedAmount;
        
        const allocations = [{
          billType: activeTab,
          billId: selectedBill.id,
          billNumber: getBillNumber(selectedBill),
          allocatedAmount: allocatedAmount,
          billOutstanding: billOutstanding,
          isFullPayment: allocatedAmount >= billOutstanding
        }];
        
        // If there's remaining amount, allocate to other bills using FIFO
        if (remainingAmount > 0) {
          const { allocations: fifoAllocations } = allocatePaymentFIFO(selectedPartyForPayment, remainingAmount, activeTab);
          allocations.push(...fifoAllocations);
        }
        
        paymentData = {
          receiptNumber: receiptNumber,
          paymentDate: paymentDate,
          partyId: selectedPartyForPayment,
          partyName: getPartyName(selectedPartyForPayment),
          totalAmount: paymentAmountNum,
          paymentMode: paymentMode,
          reference: paymentReference,
          notes: paymentNotes,
          type: activeTab,
          paymentType: 'bill',
          billId: selectedBill.id,
          billNumber: getBillNumber(selectedBill),
          allocations: allocations,
          remainingAmount: remainingAmount,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        };
      } else {
        // Khata-wise payment - use FIFO logic for all bills
        const { allocations, remainingAmount } = allocatePaymentFIFO(selectedPartyForPayment, paymentAmountNum, activeTab);
        
        paymentData = {
          receiptNumber: receiptNumber,
          paymentDate: paymentDate,
          partyId: selectedPartyForPayment,
          partyName: getPartyName(selectedPartyForPayment),
          totalAmount: paymentAmountNum,
          paymentMode: paymentMode,
          reference: paymentReference,
          notes: paymentNotes,
          type: activeTab,
          paymentType: 'khata',
          allocations: allocations,
          remainingAmount: remainingAmount,
          createdAt: serverTimestamp(),
          updatedAt: serverTimestamp()
        };
      }

      // Add to payments collection
      const paymentsRef = collection(db, `artifacts/${appId}/users/${userId}/payments`);
      const docRef = await addDoc(paymentsRef, paymentData);
      console.log('Payment added with ID:', docRef.id);

      // Reset form
      setPaymentAmount('');
      setPaymentDate(new Date().toISOString().split('T')[0]);
      setPaymentMode('Cash');
      setPaymentReference('');
      setPaymentNotes('');
      setReceiptNumber('');
      setSelectedPartyForPayment('');
      setPaymentType('bill');
      setShowPaymentModal(false);
      setSelectedBill(null);
      
      alert('Payment added successfully!');
    } catch (error) {
      console.error('Error saving payment:', error);
      alert('Error saving payment. Please try again.');
    }
  };

  // Handle view payment details
  const handleViewPaymentDetails = (bill) => {
    setSelectedBill(bill);
    setShowPaymentDetailsModal(true);
  };

  // Handle preview receipt
  const handlePreviewReceipt = (payment) => {
    setSelectedReceipt(payment);
    setShowReceiptModal(true);
  };

  // Handle delete payment
  const handleDeletePayment = async (payment) => {
    if (!window.confirm('Are you sure you want to delete this payment?')) {
      return;
    }

    try {
      const paymentRef = doc(db, `artifacts/${appId}/users/${userId}/payments`, payment.id);
      await deleteDoc(paymentRef);
      
      setShowPaymentDetailsModal(false);
      setShowReceiptModal(false);
      alert('Payment deleted successfully!');
    } catch (error) {
      console.error('Error deleting payment:', error);
      alert('Error deleting payment. Please try again.');
    }
  };

  // Print receipt (Browser print)
  const printReceipt = () => {
    if (!selectedReceipt) return;
    
    // Create a new window for printing
    const printWindow = window.open('', '_blank');
    const Template = selectedReceipt.type === 'purchase' ? PurchaseReceiptTemplate : ReceiptTemplate;
    
    // Render the receipt template
    const receiptElement = React.createElement(Template, {
      receipt: selectedReceipt,
      bill: selectedBill,
      company: company,
      party: parties.find(p => p.id === selectedReceipt.partyId),
      receiptNumber: selectedReceipt.receiptNumber,
      fifoAllocation: selectedReceipt.allocations
    });
    
    // Create the HTML content
    const htmlContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>Payment Receipt - ${selectedReceipt.receiptNumber}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 20px; 
              background: white; 
            }
            @media print {
              body { margin: 0; }
              .no-print { display: none; }
            }
            .receipt-container {
              max-width: 800px;
              margin: 0 auto;
              background: white;
              padding: 20px;
              border: 1px solid #ddd;
            }
            .header { text-align: center; margin-bottom: 30px; }
            .title { font-size: 24px; font-weight: bold; color: #1f2937; margin-bottom: 10px; }
            .receipt-number { font-size: 18px; color: #3b82f6; font-family: monospace; }
            .company-info { 
              text-align: center; 
              margin-bottom: 20px; 
              padding: 15px; 
              border-bottom: 2px solid #d1d5db; 
            }
            .company-name { font-size: 20px; font-weight: bold; color: #1f2937; margin-bottom: 5px; }
            .details-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin-bottom: 20px; }
            .detail-item { margin-bottom: 15px; }
            .label { font-weight: bold; color: #374151; margin-bottom: 5px; }
            .value { font-size: 16px; }
            .amount { font-size: 24px; font-weight: bold; color: #059669; }
            .section { border-top: 1px solid #e5e7eb; padding-top: 20px; margin-top: 20px; }
            .fifo-section { margin-top: 30px; }
            .fifo-title { font-size: 18px; font-weight: bold; color: #1d4ed8; margin-bottom: 15px; }
            .allocation-item { 
              padding: 15px; 
              background: #f9fafb; 
              border: 1px solid #e5e7eb; 
              border-radius: 8px; 
              margin-bottom: 10px; 
            }
            .allocation-header { 
              display: flex; 
              justify-content: space-between; 
              align-items: center; 
              margin-bottom: 8px; 
            }
            .invoice-number { font-weight: bold; }
            .status { font-size: 14px; font-weight: bold; }
            .status.full { color: #059669; }
            .status.partial { color: #d97706; }
            .allocation-details { font-size: 14px; color: #6b7280; margin-bottom: 8px; }
            .allocated-amount { font-size: 16px; font-weight: bold; color: #1d4ed8; }
            .footer { 
              margin-top: 40px; 
              padding-top: 20px; 
              border-top: 1px solid #d1d5db; 
              display: flex; 
              justify-content: space-between; 
              align-items: flex-end; 
            }
            .generated-info { font-size: 12px; color: #6b7280; }
            .signature { text-align: center; }
            .signature-line { 
              border-top: 2px solid #9ca3af; 
              width: 120px; 
              margin: 0 auto 8px; 
            }
            .signature-text { font-weight: bold; color: #374151; }
            .print-button { 
              position: fixed; 
              top: 20px; 
              right: 20px; 
              background: #3b82f6; 
              color: white; 
              padding: 10px 20px; 
              border: none; 
              border-radius: 5px; 
              cursor: pointer; 
              font-size: 14px; 
            }
            .print-button:hover { background: #2563eb; }
          </style>
        </head>
        <body>
          <button class="print-button no-print" onclick="window.print()">Print Receipt</button>
          <div class="receipt-container">
            <div class="header">
              <div class="title">PAYMENT RECEIPT</div>
              <div class="receipt-number">Receipt No: ${selectedReceipt.receiptNumber}</div>
            </div>
            
            <div class="company-info">
              <div class="company-name">${company?.firmName || company?.name || 'Company Name'}</div>
              ${company?.address ? `<div style="font-size: 14px; color: #6b7280; margin-bottom: 5px;">${company.address}</div>` : ''}
              ${company?.gstin ? `<div style="font-size: 14px; color: #6b7280;">GSTIN: ${company.gstin}</div>` : ''}
            </div>
            
            <div class="details-grid">
              <div class="detail-item">
                <div class="label">Date:</div>
                <div class="value">${selectedReceipt.paymentDate || new Date().toISOString().split('T')[0]}</div>
              </div>
              <div class="detail-item">
                <div class="label">Receipt No:</div>
                <div class="value" style="font-family: monospace; color: #3b82f6;">${selectedReceipt.receiptNumber}</div>
              </div>
            </div>
            
            <div class="section">
              <div class="detail-item">
                <div class="label">Received From:</div>
                <div class="value">${selectedReceipt.partyName || 'Party Name'}</div>
              </div>
              
              <div class="detail-item">
                <div class="label">Amount:</div>
                <div class="amount">₹${parseFloat(selectedReceipt.totalAmount || 0).toLocaleString('en-IN', { maximumFractionDigits: 2 })}</div>
              </div>
              
              <div class="details-grid">
                <div class="detail-item">
                  <div class="label">Payment Mode:</div>
                  <div class="value">${selectedReceipt.paymentMode || 'Cash'}</div>
                </div>
                <div class="detail-item">
                  <div class="label">Reference:</div>
                  <div class="value">${selectedReceipt.reference || '-'}</div>
                </div>
              </div>
              
              <div class="detail-item">
                <div class="label">Payment Type:</div>
                <div class="value" style="color: #3b82f6;">${selectedReceipt.paymentType === 'bill' ? 'Bill Payment' : 'Khata Payment (FIFO)'}</div>
              </div>
              
              ${selectedReceipt.notes ? `
                <div class="detail-item">
                  <div class="label">Notes:</div>
                  <div class="value">${selectedReceipt.notes}</div>
                </div>
              ` : ''}
            </div>
            
            ${selectedReceipt.allocations && selectedReceipt.allocations.length > 0 ? `
              <div class="fifo-section">
                <div class="fifo-title">${selectedReceipt.type === 'purchase' ? 'Bill' : 'Invoice'}-wise Allocation (FIFO):</div>
                ${selectedReceipt.allocations.map((allocation, index) => `
                  <div class="allocation-item">
                    <div class="allocation-header">
                      <span class="invoice-number">${selectedReceipt.type === 'purchase' ? 'Bill' : 'Invoice'}: ${allocation.billNumber}</span>
                      <span class="status ${allocation.isFullPayment ? 'full' : 'partial'}">${allocation.isFullPayment ? '(Full)' : '(Partial)'}</span>
                    </div>
                    <div class="allocation-details">
                      Outstanding: ₹${(allocation.billOutstanding || 0).toLocaleString('en-IN')}
                    </div>
                    <div class="allocated-amount">
                      Allocated: ₹${(allocation.allocatedAmount || 0).toLocaleString('en-IN')}
                    </div>
                  </div>
                `).join('')}
              </div>
            ` : ''}
            
            <div class="footer">
              <div class="generated-info">
                <div>Generated on: ${new Date().toLocaleDateString()}</div>
                <div>Time: ${new Date().toLocaleTimeString()}</div>
              </div>
              <div class="signature">
                <div class="signature-line"></div>
                <div class="signature-text">Authorized Signatory</div>
              </div>
            </div>
          </div>
        </body>
      </html>
    `;
    
    printWindow.document.write(htmlContent);
    printWindow.document.close();
    
    // Wait for content to load then print
    printWindow.onload = () => {
      printWindow.print();
      printWindow.close();
    };
  };

  // Generate PDF receipt using direct jsPDF (no HTML rendering issues)
  const generatePDFReceipt = () => {
    if (!selectedReceipt) return;
    
    try {
      const doc = new jsPDF();
      
      // Set initial position
      let y = 15;
      
      // Add title
      doc.setFontSize(20);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(31, 41, 55); // Dark gray
      doc.text('PAYMENT RECEIPT', 105, y, { align: 'center' });
      y += 12;
      
      // Add receipt number
      doc.setFontSize(12);
      doc.setTextColor(59, 130, 246); // Blue color
      doc.setFont('helvetica', 'bold');
      doc.text(`Receipt No: ${selectedReceipt.receiptNumber}`, 105, y, { align: 'center' });
      y += 12;
      
      // Add company name
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.setFont('helvetica', 'bold');
      doc.text(company?.firmName || company?.name || 'Company Name', 105, y, { align: 'center' });
      y += 8;
      
      // Add company details if available
      if (company?.address) {
        doc.setFontSize(10);
        doc.setFont('helvetica', 'normal');
        doc.setTextColor(107, 114, 128); // Gray color
        doc.text(company.address, 105, y, { align: 'center' });
        y += 6;
      }
      if (company?.gstin) {
        doc.text(`GSTIN: ${company.gstin}`, 105, y, { align: 'center' });
        y += 10;
      }
      
      // Add line separator
      doc.setDrawColor(209, 213, 219); // Light gray line
      doc.line(25, y, 185, y);
      y += 12;
      
      // Add payment details section
      doc.setFontSize(12);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(0, 0, 0);
      
      // Single column layout for better readability and no text cutoff
      const leftMargin = 30;
      const labelX = leftMargin;
      const valueX = leftMargin + 80;
      
      // Date
      doc.setFont('helvetica', 'bold');
      doc.text('Date:', labelX, y);
      doc.setFont('helvetica', 'normal');
      doc.text(selectedReceipt.paymentDate || new Date().toISOString().split('T')[0], valueX, y);
      y += 10;
      
      // Receipt Number
      doc.setFont('helvetica', 'bold');
      doc.text('Receipt No:', labelX, y);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(59, 130, 246);
      doc.setFont('helvetica', 'bold');
      doc.text(selectedReceipt.receiptNumber, valueX, y);
      doc.setTextColor(0, 0, 0);
      y += 10;
      
      // Received From
      doc.setFont('helvetica', 'bold');
      doc.text('Received From:', labelX, y);
      doc.setFont('helvetica', 'normal');
      doc.setFont('helvetica', 'bold');
      doc.text(selectedReceipt.partyName || 'Party Name', valueX, y);
      doc.setFont('helvetica', 'normal');
      y += 10;
      
      // Amount (larger and prominent)
      doc.setFont('helvetica', 'bold');
      doc.text('Amount:', labelX, y);
      doc.setFontSize(14);
      doc.setFont('helvetica', 'bold');
      doc.setTextColor(5, 150, 105); // Green color
      doc.text(`₹${parseFloat(selectedReceipt.totalAmount || 0).toLocaleString('en-IN', { maximumFractionDigits: 2 })}`, valueX, y);
      doc.setTextColor(0, 0, 0);
      doc.setFontSize(12);
      y += 12;
      
      // Payment Mode
      doc.setFont('helvetica', 'bold');
      doc.text('Payment Mode:', labelX, y);
      doc.setFont('helvetica', 'normal');
      doc.text(selectedReceipt.paymentMode || 'Cash', valueX, y);
      y += 10;
      
      // Reference
      doc.setFont('helvetica', 'bold');
      doc.text('Reference:', labelX, y);
      doc.setFont('helvetica', 'normal');
      doc.text(selectedReceipt.reference || '-', valueX, y);
      y += 10;
      
      // Payment Type
      doc.setFont('helvetica', 'bold');
      doc.text('Payment Type:', labelX, y);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(59, 130, 246);
      doc.setFont('helvetica', 'bold');
      doc.text(selectedReceipt.paymentType === 'bill' ? 'Bill Payment' : 'Khata Payment (FIFO)', valueX, y);
      doc.setTextColor(0, 0, 0);
      doc.setFont('helvetica', 'normal');
      y += 12;
      
      y += 15;
      
      // Add notes if available
      if (selectedReceipt.notes) {
        doc.setFont('helvetica', 'bold');
        doc.text('Notes:', 30, y);
        doc.setFont('helvetica', 'normal');
        doc.text(selectedReceipt.notes, 80, y);
        y += 12;
      }
      
      // Add FIFO allocations if available
      if (selectedReceipt.allocations && selectedReceipt.allocations.length > 0) {
        y += 6;
        
        // Section title
        doc.setFontSize(12);
        doc.setFont('helvetica', 'bold');
        doc.setTextColor(29, 78, 216); // Blue color
        doc.text(`${selectedReceipt.type === 'purchase' ? 'Bill' : 'Invoice'}-wise Allocation (FIFO):`, 30, y);
        y += 10;
        
        // Add subtle background for allocations
        doc.setFillColor(249, 250, 251); // Light gray background
        doc.rect(25, y - 5, 160, (selectedReceipt.allocations.length * 25) + 10, 'F');
        
        selectedReceipt.allocations.forEach((allocation, index) => {
          if (y > 240) {
            doc.addPage();
            y = 25;
          }
          
          // Allocation header with better spacing
          doc.setFontSize(10);
          doc.setFont('helvetica', 'bold');
          doc.setTextColor(0, 0, 0);
          doc.text(`${selectedReceipt.type === 'purchase' ? 'Bill' : 'Invoice'}: ${allocation.billNumber}`, 35, y);
          
          const status = allocation.allocatedAmount >= allocation.billOutstanding ? '(Full)' : '(Partial)';
          const statusColor = allocation.allocatedAmount >= allocation.billOutstanding ? [5, 150, 105] : [217, 119, 6];
          doc.setTextColor(...statusColor);
          doc.text(status, 160, y);
          doc.setTextColor(0, 0, 0);
          
          y += 5;
          
          // Allocation details with better formatting
          doc.setFontSize(8);
          doc.setFont('helvetica', 'normal');
          doc.setTextColor(107, 114, 128); // Gray color
          doc.text(`Outstanding: ₹${(allocation.billOutstanding || 0).toLocaleString('en-IN')}`, 40, y);
          y += 5;
          
          doc.setFontSize(9);
          doc.setFont('helvetica', 'bold');
          doc.setTextColor(29, 78, 216); // Blue color
          doc.text(`Allocated: ₹${(allocation.allocatedAmount || 0).toLocaleString('en-IN')}`, 40, y);
          doc.setTextColor(0, 0, 0);
          
          y += 10;
        });
      }
      
      // Add footer
      if (y > 250) {
        doc.addPage();
        y = 25;
      }
      
      y += 15;
      
      // Footer line
      doc.setDrawColor(209, 213, 219);
      doc.line(25, y, 185, y);
      y += 12;
      
      // Generated info
      doc.setFontSize(8);
      doc.setFont('helvetica', 'normal');
      doc.setTextColor(107, 114, 128);
      doc.text(`Generated on: ${new Date().toLocaleDateString('en-IN')} at ${new Date().toLocaleTimeString('en-IN')}`, 25, y);
      
      doc.save(`${selectedReceipt.receiptNumber}_receipt.pdf`);
    } catch (error) {
      console.error('Error generating PDF receipt:', error);
      alert('Error generating PDF. Please try again.');
    }
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-md">
      <h2 className="text-2xl font-bold text-gray-800 mb-4">Payments</h2>
      
      {/* Tabs */}
      <div className="flex space-x-1 mb-6 bg-gray-100 p-1 rounded-lg">
        <button
          onClick={() => setActiveTab('invoice')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
            activeTab === 'invoice'
              ? 'bg-white text-blue-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          Invoice
        </button>
        <button
          onClick={() => setActiveTab('challan')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
            activeTab === 'challan'
              ? 'bg-white text-blue-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          Challan
        </button>
        <button
          onClick={() => setActiveTab('purchase')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
            activeTab === 'purchase'
              ? 'bg-white text-blue-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          Purchase
        </button>
        <button
          onClick={() => setActiveTab('receipts')}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
            activeTab === 'receipts'
              ? 'bg-white text-blue-600 shadow-sm'
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          Payment Receipts
        </button>
      </div>

      {/* Payment Receipts Sub-tabs */}
      {activeTab === 'receipts' && (
        <div className="flex space-x-1 mb-4 bg-gray-50 p-1 rounded-lg">
          <button
            onClick={() => setReceiptsSubTab('invoice')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              receiptsSubTab === 'invoice'
                ? 'bg-white text-blue-600 shadow-sm'
                : 'text-gray-600 hover:text-gray-800'
            }`}
          >
            Invoice Receipts
          </button>
          <button
            onClick={() => setReceiptsSubTab('challan')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              receiptsSubTab === 'challan'
                ? 'bg-white text-blue-600 shadow-sm'
                : 'text-gray-600 hover:text-gray-800'
            }`}
          >
            Challan Receipts
          </button>
          <button
            onClick={() => setReceiptsSubTab('purchase')}
            className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors ${
              receiptsSubTab === 'purchase'
                ? 'bg-white text-blue-600 shadow-sm'
                : 'text-gray-600 hover:text-gray-800'
            }`}
          >
            Purchase Receipts
          </button>
        </div>
      )}

      {/* Filters */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Time Filter</label>
          <select
            value={timeFilter}
            onChange={(e) => setTimeFilter(e.target.value)}
            className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="all">All Time</option>
            <option value="custom">Custom Range</option>
            <option value="financial">Financial Year</option>
            <option value="monthly">Monthly</option>
            <option value="quarterly">Quarterly</option>
          </select>
        </div>

        {timeFilter === 'custom' && (
          <>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">From Date</label>
              <input
                type="date"
                value={customDateFrom}
                onChange={(e) => setCustomDateFrom(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">To Date</label>
              <input
                type="date"
                value={customDateTo}
                onChange={(e) => setCustomDateTo(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
          </>
        )}

        {timeFilter === 'financial' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Financial Year</label>
            <select
              value={selectedFinancialYear}
              onChange={(e) => setSelectedFinancialYear(e.target.value)}
              className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="2024-25">2024-25</option>
              <option value="2025-26">2025-26</option>
              <option value="2026-27">2026-27</option>
            </select>
          </div>
        )}

        {timeFilter === 'financial' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Sub Filter</label>
            <select
              value={selectedSubFilter}
              onChange={(e) => setSelectedSubFilter(e.target.value)}
              className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">All</option>
              <option value="month">Month</option>
              <option value="quarter">Quarter</option>
            </select>
          </div>
        )}

        {timeFilter === 'financial' && selectedSubFilter === 'month' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Month</label>
            <select
              value={selectedMonth}
              onChange={(e) => setSelectedMonth(e.target.value)}
              className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">All Months</option>
              <option value="2025-04">April 2025</option>
              <option value="2025-05">May 2025</option>
              <option value="2025-06">June 2025</option>
              <option value="2025-07">July 2025</option>
              <option value="2025-08">August 2025</option>
              <option value="2025-09">September 2025</option>
              <option value="2025-10">October 2025</option>
              <option value="2025-11">November 2025</option>
              <option value="2025-12">December 2025</option>
              <option value="2026-01">January 2026</option>
              <option value="2026-02">February 2026</option>
              <option value="2026-03">March 2026</option>
            </select>
          </div>
        )}

        {timeFilter === 'financial' && selectedSubFilter === 'quarter' && (
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Quarter</label>
            <select
              value={selectedQuarter}
              onChange={(e) => setSelectedQuarter(e.target.value)}
              className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">All Quarters</option>
              <option value="2025-Q1">Q1 (Apr-Jun 2025)</option>
              <option value="2025-Q2">Q2 (Jul-Sep 2025)</option>
              <option value="2025-Q3">Q3 (Oct-Dec 2025)</option>
              <option value="2025-Q4">Q4 (Jan-Mar 2026)</option>
            </select>
          </div>
        )}

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">Party</label>
          <select
            value={selectedParty}
            onChange={(e) => setSelectedParty(e.target.value)}
            className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">All Parties</option>
            {parties.map(party => (
              <option key={party.id} value={party.id}>{party.name}</option>
            ))}
          </select>
        </div>
      </div>

      <div className="flex justify-between items-center mb-4">
        <button
          onClick={() => {
            setTimeFilter('all');
            setCustomDateFrom('');
            setCustomDateTo('');
            setSelectedParty('');
            setSelectedFinancialYear('2025-26');
            setSelectedMonth('');
            setSelectedQuarter('');
            setSelectedSubFilter('');
            setPartySearchTerm('');
          }}
          className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
        >
          Clear All
        </button>
      </div>

      {/* Content based on active tab */}
      {activeTab !== 'receipts' && (
        <>
          {/* Overall Records Table */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Overall {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Records</h3>
              <div className="flex space-x-2">
                <button
                  onClick={() => exportBillsData('csv')}
                  className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700"
                >
                  Export CSV
                </button>
                <button
                  onClick={() => exportBillsData('excel')}
                  className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                >
                  Export Excel
                </button>
                <button
                  onClick={() => exportBillsData('pdf')}
                  className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
                >
                  Export PDF
                </button>
              </div>
            </div>
            
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white border border-gray-300">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleSort('number')}>
                      {activeTab === 'invoice' ? 'Invoice' : activeTab === 'challan' ? 'Challan' : 'Purchase'} Number
                    </th>
                    <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleSort('date')}>
                      Date
                    </th>
                    <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleSort('party')}>
                      Party Name
                    </th>
                    <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleSort('totalAmount')}>
                      Total Amount
                    </th>
                    <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleSort('totalPaid')}>
                      Total Paid
                    </th>
                    <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleSort('outstanding')}>
                      Outstanding
                    </th>
                    <th className="px-4 py-2 border-b text-center text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleSort('paymentCount')}>
                      No. of Payments
                    </th>
                    <th className="px-4 py-2 border-b text-center text-sm font-medium text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {getFilteredBills().map((bill) => (
                    <tr key={bill.id} className="hover:bg-gray-50">
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{getBillNumber(bill)}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{convertTimestamp(bill[getBillDateField()])}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{getPartyName(bill.partyId || bill.party)}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{(bill.totalAmount || 0).toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{(bill.totalPaid || 0).toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{(bill.outstanding || 0).toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-center">
                        <button
                          onClick={() => handleViewPaymentDetails(bill)}
                          className="text-blue-600 hover:text-blue-800 underline"
                        >
                          {bill.paymentCount || 0}
                        </button>
                      </td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-center">
                        <button
                          onClick={() => handleAddPayment(bill)}
                          className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 mr-2"
                        >
                          Add Payment
                        </button>
                      </td>
                    </tr>
                  ))}
                  {/* Totals Row */}
                  <tr className="bg-gray-100 font-semibold">
                    <td className="px-4 py-2 border-b text-sm text-gray-900">Total ({getBillsTotals().totalBills} bills)</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900"></td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900"></td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{getBillsTotals().totalAmount.toLocaleString('en-IN')}</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{getBillsTotals().totalPaid.toLocaleString('en-IN')}</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{getBillsTotals().totalOutstanding.toLocaleString('en-IN')}</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-center"></td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-center"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>

          {/* Party-wise Summary Table */}
          <div className="mb-8">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Party-wise Summary</h3>
              <div className="flex space-x-2">
                <button
                  onClick={() => exportPartyWiseData('csv')}
                  className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700"
                >
                  Export CSV
                </button>
                <button
                  onClick={() => exportPartyWiseData('excel')}
                  className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
                >
                  Export Excel
                </button>
                <button
                  onClick={() => exportPartyWiseData('pdf')}
                  className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
                >
                  Export PDF
                </button>
              </div>
            </div>

            <div className="mb-4">
              <input
                type="text"
                placeholder="Search parties..."
                value={partySearchTerm}
                onChange={(e) => setPartySearchTerm(e.target.value)}
                className="w-full md:w-64 border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="overflow-x-auto">
              <table className="min-w-full bg-white border border-gray-300">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700">Party Name</th>
                    <th className="px-4 py-2 border-b text-center text-sm font-medium text-gray-700">Total Bills</th>
                    <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700">Total Amount</th>
                    <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700">Total Paid</th>
                    <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700">Outstanding</th>
                    <th className="px-4 py-2 border-b text-center text-sm font-medium text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {getPartyWiseSummary().map((party) => (
                    <tr key={party.partyId} className="hover:bg-gray-50">
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{party.partyName}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-center">{party.totalBills}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{party.totalAmount.toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{party.totalPaid.toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{party.outstanding.toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-center">
                        <button
                          onClick={() => handleAddKhataPayment(party.partyId)}
                          className="px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700 mr-2"
                        >
                          Add FIFO Payment
                        </button>
                      </td>
                    </tr>
                  ))}
                  {/* Totals Row */}
                  <tr className="bg-gray-100 font-semibold">
                    <td className="px-4 py-2 border-b text-sm text-gray-900">Total ({getPartyWiseTotals().totalParties} parties)</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-center">{getPartyWiseTotals().totalBills}</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{getPartyWiseTotals().totalAmount.toLocaleString('en-IN')}</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{getPartyWiseTotals().totalPaid.toLocaleString('en-IN')}</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{getPartyWiseTotals().totalOutstanding.toLocaleString('en-IN')}</td>
                    <td className="px-4 py-2 border-b text-sm text-gray-900 text-center"></td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        </>
      )}

      {/* Payment Receipts Table */}
      {activeTab === 'receipts' && (
        <div className="mb-8">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-gray-800">Payment Receipts</h3>
            <div className="flex space-x-2">
              <button
                onClick={() => exportReceiptsData('csv')}
                className="px-3 py-1 bg-green-600 text-white text-sm rounded hover:bg-green-700"
              >
                Export CSV
              </button>
              <button
                onClick={() => exportReceiptsData('excel')}
                className="px-3 py-1 bg-blue-600 text-white text-sm rounded hover:bg-blue-700"
              >
                Export Excel
              </button>
              <button
                onClick={() => exportReceiptsData('pdf')}
                className="px-3 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700"
              >
                Export PDF
              </button>
            </div>
          </div>

          <div className="overflow-x-auto">
            <table className="min-w-full bg-white border border-gray-300">
              <thead>
                <tr className="bg-gray-50">
                  <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleReceiptsSort('receiptNumber')}>
                    Receipt Number
                  </th>
                  <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleReceiptsSort('paymentDate')}>
                    Date
                  </th>
                  <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleReceiptsSort('partyName')}>
                    Party Name
                  </th>
                  <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleReceiptsSort('totalAmount')}>
                    Amount
                  </th>
                  <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleReceiptsSort('paymentMode')}>
                    Payment Mode
                  </th>
                  <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700 cursor-pointer hover:bg-gray-100" onClick={() => handleReceiptsSort('paymentType')}>
                    Type
                  </th>
                  <th className="px-4 py-2 border-b text-center text-sm font-medium text-gray-700">Actions</th>
                </tr>
              </thead>
              <tbody>
                {payments
                  .filter(payment => {
                    if (activeTab === 'receipts') {
                      return payment.type === receiptsSubTab;
                    }
                    return payment.type === activeTab;
                  })
                  .map((payment) => (
                    <tr key={payment.id} className="hover:bg-gray-50">
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{payment.receiptNumber}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{convertTimestamp(payment.paymentDate)}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{payment.partyName}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{(payment.totalAmount || 0).toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{payment.paymentMode}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{payment.paymentType === 'bill' ? 'Bill Payment' : 'Khata Payment'}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-center">
                        <button
                          onClick={() => handlePreviewReceipt(payment)}
                          className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 mr-2"
                        >
                          Preview
                        </button>
                        <button
                          onClick={() => handleDeletePayment(payment)}
                          className="px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                {/* Totals Row */}
                <tr className="bg-gray-100 font-semibold">
                  <td className="px-4 py-2 border-b text-sm text-gray-900">Total ({getReceiptsTotals().totalReceipts} receipts)</td>
                  <td className="px-4 py-2 border-b text-sm text-gray-900"></td>
                  <td className="px-4 py-2 border-b text-sm text-gray-900"></td>
                  <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{getReceiptsTotals().totalAmount.toLocaleString('en-IN')}</td>
                  <td className="px-4 py-2 border-b text-sm text-gray-900"></td>
                  <td className="px-4 py-2 border-b text-sm text-gray-900"></td>
                  <td className="px-4 py-2 border-b text-sm text-gray-900 text-center"></td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Payment Modal */}
      {showPaymentModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Add Payment</h3>
            
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Payment Type</label>
              <select
                value={paymentType}
                onChange={(e) => setPaymentType(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="bill">Bill Payment</option>
                <option value="khata">Khata Payment (FIFO)</option>
              </select>
            </div>

            {paymentType === 'khata' && (
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-1">Party</label>
                <select
                  value={selectedPartyForPayment}
                  onChange={(e) => setSelectedPartyForPayment(e.target.value)}
                  className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Select Party</option>
                  {parties.map(party => (
                    <option key={party.id} value={party.id}>{party.name}</option>
                  ))}
                </select>
              </div>
            )}

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Amount</label>
              <input
                type="number"
                value={paymentAmount}
                onChange={(e) => setPaymentAmount(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Enter amount"
              />
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
              <input
                type="date"
                value={paymentDate}
                onChange={(e) => setPaymentDate(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Payment Mode</label>
              <select
                value={paymentMode}
                onChange={(e) => setPaymentMode(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
              >
                {paymentModes.map(mode => (
                  <option key={mode} value={mode}>{mode}</option>
                ))}
              </select>
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Reference</label>
              <input
                type="text"
                value={paymentReference}
                onChange={(e) => setPaymentReference(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                placeholder="Optional reference"
              />
            </div>

            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">Notes</label>
              <textarea
                value={paymentNotes}
                onChange={(e) => setPaymentNotes(e.target.value)}
                className="w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500"
                rows="3"
                placeholder="Optional notes"
              />
            </div>

            <div className="flex justify-end space-x-2">
              <button
                onClick={() => {
                  setShowPaymentModal(false);
                  setPaymentAmount('');
                  setPaymentDate(new Date().toISOString().split('T')[0]);
                  setPaymentMode('Cash');
                  setPaymentReference('');
                  setPaymentNotes('');
                  setSelectedPartyForPayment('');
                  setSelectedBillForPayment(null);
                }}
                className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
              >
                Cancel
              </button>
              <button
                onClick={handleSavePayment}
                className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                Save Payment
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Payment Details Modal */}
      {showPaymentDetailsModal && selectedBill && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[80vh] overflow-y-auto">
            <h3 className="text-lg font-semibold text-gray-800 mb-4">Payment Details - {getBillNumber(selectedBill)}</h3>
            
            <div className="overflow-x-auto">
              <table className="min-w-full bg-white border border-gray-300">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700">Receipt Number</th>
                    <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700">Date</th>
                    <th className="px-4 py-2 border-b text-right text-sm font-medium text-gray-700">Amount</th>
                    <th className="px-4 py-2 border-b text-left text-sm font-medium text-gray-700">Payment Mode</th>
                    <th className="px-4 py-2 border-b text-center text-sm font-medium text-gray-700">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {getBillPayments(selectedBill).map((payment) => (
                    <tr key={payment.id} className="hover:bg-gray-50">
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{payment.receiptNumber}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{convertTimestamp(payment.paymentDate)}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-right">₹{(payment.totalAmount || 0).toLocaleString('en-IN')}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900">{payment.paymentMode}</td>
                      <td className="px-4 py-2 border-b text-sm text-gray-900 text-center">
                        <button
                          onClick={() => handlePreviewReceipt(payment)}
                          className="px-3 py-1 bg-blue-600 text-white text-xs rounded hover:bg-blue-700 mr-2"
                        >
                          Preview
                        </button>
                        <button
                          onClick={() => handleDeletePayment(payment)}
                          className="px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700"
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>

            <div className="flex justify-end mt-4">
              <button
                onClick={() => setShowPaymentDetailsModal(false)}
                className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Receipt Modal */}
      {showReceiptModal && selectedReceipt && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[80vh] overflow-y-auto">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold text-gray-800">Payment Receipt - {selectedReceipt.receiptNumber}</h3>
              <div className="flex space-x-2">
                <button
                  onClick={printReceipt}
                  className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
                >
                  Print
                </button>
                <button
                  onClick={generatePDFReceipt}
                  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors"
                >
                  PDF
                </button>
                <button
                  onClick={() => setShowReceiptModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors"
                >
                  Close
                </button>
              </div>
            </div>
            
            <div className="receipt-container">
              {selectedReceipt.type === 'purchase' ? (
                <PurchaseReceiptTemplate
                  receipt={selectedReceipt}
                  bill={selectedBill}
                  company={company}
                  party={parties.find(p => p.id === selectedReceipt.partyId)}
                  receiptNumber={selectedReceipt.receiptNumber}
                  fifoAllocation={selectedReceipt.allocations}
                />
              ) : (
                <ReceiptTemplate
                  receipt={selectedReceipt}
                  bill={selectedBill}
                  company={company}
                  party={parties.find(p => p.id === selectedReceipt.partyId)}
                  receiptNumber={selectedReceipt.receiptNumber}
                  fifoAllocation={selectedReceipt.allocations}
                />
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Payments;
