rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Reusable function to check user authentication
    function isUserAuthenticated(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Reusable function to check if user is verified
    function isUserVerified(userId) {
      return request.auth != null && 
             request.auth.uid == userId && 
             request.auth.token.email_verified == true;
    }

    // Reusable function to check if user has active status
    function isUserActive(userId) {
      return request.auth != null && 
             request.auth.uid == userId && 
             get(/databases/$(database)/documents/users/$(userId)).data.status == 'active';
    }

    // Rule for user-specific data under artifacts (main app structure)
    match /artifacts/{appId}/users/{userId}/{document=**} {
      allow read, write: if isUserAuthenticated(userId);
    }

    // Rule for salaryPayments data (manufacturing structure)
    match /salaryPayments/{appId}/{document=**} {
      allow read, write: if request.auth != null;
    }

    // Rule for user root document - enhanced with verification checks
    match /users/{userId} {
      allow read: if isUserAuthenticated(userId);
      allow create: if request.auth != null;
      allow update: if isUserAuthenticated(userId);
      allow delete: if false; // Prevent user deletion
    }

    // Rule for user bill layout documents
    match /users/{userId}/billLayouts/{layoutId} {
      allow read, write: if isUserAuthenticated(userId);
    }

    // Rule to allow read access to all user documents (e.g., during duplicate check)
    match /users/{document} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
    }

    // Allow access to todos collection (for dashboard)
    match /todos/{document} {
      allow read, write: if request.auth != null;
    }

    // Verification codes collection (for phone verification)
    match /verificationCodes/{codeId} {
      allow read, write: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // User sessions collection (for tracking login attempts)
    match /userSessions/{sessionId} {
      allow read, write: if request.auth != null;
    }

    // Company management rules
    match /artifacts/{appId}/companies/{companyId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || 
         resource.data.admin.userId == request.auth.uid || 
         resource.data.members[request.auth.uid] != null);
    }

    // Reference links rules
    match /artifacts/{appId}/companies/{companyId}/referenceLinks/{linkId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/artifacts/$(appId)/companies/$(companyId)).data.admin.userId == request.auth.uid;
    }

    // Allow authenticated users to access any collection (for development)
    // This is more permissive but allows the app to work properly
    match /{document=**} {
      allow read, write: if request.auth != null;
    }
  }
}

service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}